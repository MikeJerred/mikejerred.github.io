{
  "_id": "59e86994f36d280364363cd1",
  "portfolioId": 3,
  "headline": "Dragon CMS",
  "updatedDate": 1497562620266,
  "markdown": "The company I was working for has several websites which their copy writers and editors use a CMS for, and the concept of this project was to rebuild this CMS from scratch. I was brought in to advise on the architecture and create a data migration tool, as well as build pieces of the application.\n\nThe architecture consisted of:\n\n- An Angular 2 front-end application that would listen to event messages from the server via WebSockets. These event messages would contain pieces of the page that have changed, and the Angular app would then update the view with this new data. In this way multiple people could be viewing and editing data on the CMS at once, and see each others changes in real-time without needing to refresh the browser. If two people changed the same thing at the same time, one of them would receive an error message.\n- A C# Web API server that serves requests for data to the Angular app, as well as providing WebSocket channels for the app to listen to.\n- A C# project to convert content changes made via the API into event messages and save them as JSON in a database\n- A C# Entity Framework project to update a master SQL database containing the business entities whenever these event messages are fired\n- A C# project to convert the event messages into UI messages as required by the Angular application, and push them through the WebSocket channels\n- SQL views to project from the master SQL database into site-specific databases\n\nA data migration tool was required to retrieve all of the data in the old CMS and put it in a format for the new system. This required retrieving data from the old database, and generating corresponding event messages for the new system. The goal was to take the old site down, migrate the data, and put the new site up over the weekend - so the requirement was that the data migration must be able to complete in 48 hours. To do this I used a high degree of parallelization using Rx observables and C# Task objects to perform the migration for different parts on different threads. The migration would then be run on a high power server and was able to complete within the required time-frame.\n\nI built components across the full stack:\n- HTML & CSS for the component\n- Typescript Angular component to control the view\n- API endpoint to retrieve the data from\n- Business layer logic\n- Data classes for event messages related to the component\n- Code to alter the master SQL database when the event messages are fired\n- SQL views to project the master database onto site-specific databases\n- Unit tests\n"
}
