{
  "_id": "57ece57df36d28459b086112",
  "blogId": 3,
  "headline": "Token Authentication: Back-end",
  "updatedDate": 1475146560266,
  "markdown": "Following on from part 1, this article will look at how to add token authentication to the backend, using a typical C# OWIN server as an example.\n\n\nTo implement token authentication we must first disable the default authentication, and add an authentication filter that will use tokens:\n\n```cs\nusing System.Web.Http;\nusing Microsoft.Owin;\nusing Microsoft.Owin.Security.OAuth;\nusing Owin;\n\n[assembly: OwinStartup(typeof(Startup))]\npublic class Startup\n{\n    public static OAuthBearerAuthenticationOptions OAuthBearerOptions { get; private set; }\n\n        public void Configuration(IAppBuilder app)\n        {\n            var config = new HttpConfiguration();\n\n            OAuthBearerOptions = new OAuthBearerAuthenticationOptions();\n            app.UseOAuthBearerAuthentication(OAuthBearerOptions);\n\n            // Configure Web API to use only bearer token authentication.\n            config.SuppressDefaultHostAuthentication();\n            config.Filters.Add(new HostAuthenticationFilter(OAuthDefaults.AuthenticationType));\n\n            app.UseWebApi(config);\n        }\n}\n```\n\nWe can then add the ```[Authorize]``` attribute to any controllers / routes that require it, e.g.:\n\n```cs\nusing System.Web.Http;\n\n[Authorize]\npublic class FooController : ApiController\n{\n    [HttpGet]\n    [Route(\"/foo\")]\n    public async Task<int> GetFoo()\n    {\n        return 1337;\n    }\n}\n```\n\nIt is also important to set the machineKey in web.config. This is to ensure that the tokens are always encrypted by the same key, since by default the keys will be auto generated and will be different across different machines and versions. [This link](https://msdn.microsoft.com/en-us/library/ff649308.aspx) shows how to set the machineKey.\n\n\n### Endpoints\n\nFirst, we need to create a method that will generate an access token:\n\n```cs\npublic class AuthData\n{\n    public int UserId { get; set; }\n    public string AccessToken { get; set; }\n    public Guid RefreshToken { get; set; }\n}\n\npublic AuthData GenerateAuthData(User user, Guid refreshToken)\n{\n    var identity = new ClaimsIdentity(\n        new []\n        {\n            new Claim(ClaimTypes.NameIdentifier, user.Id.ToString()),\n            // any other custom claims you need, for example you may want\n            // a claim like \"IsAdmin\": \"true\" or \"HasAccessToStuff\": \"false\"\n        },\n        \"TokenAuth\");\n    var ticket = new AuthenticationTicket(identity, new AuthenticationProperties\n        {\n            ExpiresUtc = DateTime.UtcNow.AddMinutes(10)\n        });\n\n    // encrypt the ticket\n    var accessToken = Startup.OAuthBearerOptions.AccessTokenFormat.Protect(ticket);\n        \n    return new AuthData\n    {\n        Authenticated = true,\n        UserId = user.Id,\n        AccessToken = accessToken,\n        RefreshToken = refreshToken\n    };\n}\n```\n\n\n\nNow we need to create a couple of REST endpoints to allow the user to login and get a token:\n\n- ```POST /login``` takes a username and password, validates them and returns new access and refresh tokens\n- ```GET /access-token``` takes a username and refresh token, validates them and returns a new access token\n \n\n```cs\npublic class AuthRequest\n{\n    public string Username { get; set; }\n    public string Password { get; set; }\n}\n\n[HttpPost]\n[Route(\"/login\")]\n[AllowAnonymous]\npublic async Task<AuthData> Login([FromBody] AuthRequest request)\n{\n    if (await Database.ValidateLogin(request.Username, request.Password))\n    {\n        var user = await Database.GetUserByName(request.Username);\n        var refreshToken = Guid.NewGuid();\n        // save the refresh token to this user in the database\n        await Database.SetRefreshToken(user.Id, refreshToken);\n        \n        return GenerateAuthData(user, refreshToken);\n    }\n    \n    // handle failure\n    return new AuthData { Authenticated = false };\n}\n\n[HttpGet]\n[AllowAnonymous]\n[Route(\"/access-token\")]\npublic async Task<AuthData> GetAccessToken(Guid refreshToken, int userId)\n{\n    if (await Database.ValidateRefreshToken(userId, refreshToken))\n    {\n        var user = await Database.GetUserById(userId);\n        return GenerateAuthData(user, refreshToken);\n    }\n    \n    // handle failure\n    return new AuthData { Authenticated = false };\n}\n```\n\nThis is all that is needed on the server side. In the next part we will look at how to use these endpoints in the client using AngularJs."
}
