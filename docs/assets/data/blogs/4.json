{
  "_id": "57ece5cff36d28459b086115",
  "blogId": 4,
  "headline": "Token Authentication: Front-end",
  "updatedDate": 1475146680266,
  "markdown": "In this article we will see how to implement the client-side part of token authentication using Angular, and the server-side REST endpoints we just built in part 2.\n\nThe first thing is that we need to provide a way for the user to login. We will create a service to do this, which can then be used on the login page:\n\n```typescript\ninterface IAuthData {\n    authenticated: boolean;\n    userId: number;\n    accessToken: string;\n    refreshToken: string;\n}\n\nclass AuthenticationService {\n    static $inject = ['$http'];\n    constructor(private $http: ng.IHttpService) {}\n\n    public getAuthData(): IAuthData {\n        let data = // get data from local storage\n        return data;\n    }\n\n    public login(username: string, password: string): ng.IPromise<IAuthData> {\n        return this.$http\n            .post<IAuthData>('/login', { username: username, password: password })\n            .then(response => {\n                let data = response.data;\n                if (data.authenticated) {\n                    // save data to local storage\n                    return data;\n                } else {\n                    // login failed\n                }\n            });\n    }\n}\n\napp.service('authentication', AuthenticationService);\n```\n\nTo this same service we can then add a method to refresh the access token:\n\n```typescript\npublic refreshAccessToken(): ng.IPromise<IAuthData> {\n    let data = this.getAuthData();\n    if (data && data.refreshToken) {\n        return this.$http\n            .get<IAuthData>('/access-token', {\n                params: {\n                    userId: data.userId,\n                    refreshToken: data.refreshToken\n                }\n            })\n            .then(response => {\n                let newData = response.data;\n                if (newData.authenticated) {\n                    // save newData to local storage\n                    return newData;\n                } else {\n                    // handle failure\n                }\n            });\n    }\n}\n```\n\n\nNow we need to ensure that the access token is sent in the header of requests we make. This can be done manually by adding a header on every request, but it often makes more sense to add an interceptor to the `$http` service, which will supply the header on every request:\n\n```typescript\nclass AuthInterceptor {\n    static $inject = ['$injector', '$q'];\n    constructor(private $injector, private $q: ng.IQService) {}\n\n    public request = (config: ng.IRequestConfig) => {\n        let defer = this.$q.defer<ng.IRequestConfig>();\n\n        // we need to use $injector here because the authentication service has\n        // a dependency on $http, but the interceptor needs to be created before\n        // $http is available\n        this.$injector.invoke(['authentication', (authentication) => {\n            let authData = authentication.getAuthData();\n            config.headers['Authorization'] = 'Bearer ' + authData.accessToken;\n            defer.resolve(config);\n        }]);\n\n        return defer.promise;\n    }\n}\n\n\napp.service('authInterceptor', AuthInterceptor);\n\napp.config(['$httpProvider', ($httpProvider: ng.IHttpProvider) => {\n    $httpProvider.interceptors.push('authInterceptor');\n}]);\n```\n\nThis should now work as a basic implementation, but we can add some bells & whistles such as refreshing the access token when it expires:\n\n\n```typescript\npublic request = (config: ng.IRequestConfig) => {\n    if (config.url === '/access-token' || config.url === '/login') {\n        // for some requests we do not want to add the headers, e.g.\n        // ones that do not require login\n        return config;\n    }\n\n    let defer = this.$q.defer<ng.IRequestConfig>();\n\n    this.$injector.invoke(['authentication', (authentication) => {\n        let authData = authentication.getAuthData();\n        if (!authData) {\n            // user must login\n            defer.reject();\n            return;\n        }\n\n        if (authData.accessToken && authData.expiry.getTime() > Date.now()) {\n            config.headers['Authorization'] = 'Bearer ' + authData.accessToken;\n            defer.resolve(config);\n        } else if (authData.refreshToken) {\n            authentication.refreshAccessToken().then(newData => {\n                if (newData.authenticated) {\n                    config.headers['Authorization'] = 'Bearer ' + newData.accessToken;\n                    defer.resolve(config);\n                } else {\n                    // user must login\n                    defer.reject();\n                }\n            });\n        }\n    }]);\n\n    return defer.promise;\n}\n```"
}
